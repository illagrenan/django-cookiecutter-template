#######################################################################
#
# This is the main Nginx configuration file
# for project "{{ cookiecutter.project_name }}".
#
#######################################################################

upstream {{ cookiecutter.repo_name }}_gunicorn_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:{{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/app/gunicorn.sock fail_timeout=0;
}

#---------------------------------------------------------------------------------------------------
# Permanent redirect to https version
#---------------------------------------------------------------------------------------------------
server {
    listen          80;
    listen          [::]:80;
    server_name 	www.{{ cookiecutter.domain_name }} {{ cookiecutter.domain_name }};
    return          301 https://$server_name$request_uri;
}

#---------------------------------------------------------------------------------------------------
# Main virtualhost
#---------------------------------------------------------------------------------------------------
server {
    server_name www.{{ cookiecutter.domain_name }} {{ cookiecutter.domain_name }};

    # - - - - - -
    # TODO
    # - - - - - -
    # Uncomment to enable basic auth
    # - - - - - -
    # Generate:
    # - - - - - -
    #
    #           $ sudo htpasswd -c {{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/app/.htpasswd admin
    #
    # auth_basic "Restricted";
    # auth_basic_user_file {{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/app/.htpasswd;

    client_max_body_size 4G;

    access_log {{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/app/log/nginx-access.log;
    error_log  {{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/app/log/nginx-error.log;

    location /static/ {
        expires 30d;
        add_header Pragma public;
        add_header Cache-Control "public";
        alias   {{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/app/data/static/;
    }

    location /robots.txt {
        expires 30d;
        add_header Pragma public;
        add_header Cache-Control "public";
        alias   {{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/app/data/static/robots.txt;
    }

    location /humans.txt {
        expires 30d;
        add_header Pragma public;
        add_header Cache-Control "public";
        alias   {{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/app/data/static/humans.txt;
    }

    location ~ ^/favicon.(\w*)$ {
        expires 30d;
        add_header Pragma public;
        add_header Cache-Control "public";
        alias   {{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/app/data/static/favicon.$1;
    }

    location /media/ {
        alias   {{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/app/data/media/;
    }


    # SSL configuration
    # See:
    #       https://filip-prochazka.com/blog/nginx-https-spdy-hsts-security
    #       http://security.stackexchange.com/questions/79519/ssl-tls-how-to-fix-chain-issues-contains-anchor

    # - - - - - -
    # TODO
    # - - - - - -
    #
    # Remove default if you have more SSL-secured hosts on one IP:
    #
    listen                      [::]:443 default ssl http2;     # <---- TODO : Choose one
    listen                      [::]:443 ssl http2;             # <---- TODO : Choose one

    ssl                         on;
	ssl_certificate 			/etc/letsencrypt/live/{{ cookiecutter.domain_name }}/fullchain.pem;
	ssl_certificate_key 		/etc/letsencrypt/live/{{ cookiecutter.domain_name }}/privkey.pem;

	# - - - - - -
	# Generate:
	# - - - - - -
	#
	#           $ openssl dhparam -outform pem -out {{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/app/data/certs/dhparam2048.pem 2048
	#           $ sudo chown root:root {{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/app/data/certs/dhparam2048.pem
	#           $ sudo chmod 0400 {{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/app/data/certs/dhparam2048.pem
	#
    ssl_dhparam                 {{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/app/data/certs/dhparam2048.pem;

    include                     {{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/app/conf/nginx/directives/ssl.conf;
    include                     {{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/app/conf/nginx/directives/ssl-stapling.conf;

    # Directives
    include                     {{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/app/conf/nginx/directives/cache-file-descriptors.conf;
    include                     {{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/app/conf/nginx/directives/x-ua-compatible.conf;
    include                     {{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/app/conf/nginx/location/protect-system-files.conf;

    # Proxy for Gunicorn
    # See: http://michal.karzynski.pl/blog/2013/06/09/django-nginx-gunicorn-virtualenv-supervisor/
    location / {
        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://{{ cookiecutter.repo_name }}_gunicorn_server;
            break;
        }
    }
}
