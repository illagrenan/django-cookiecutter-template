#######################################################################
#
# This is the main Nginx configuration file
# for project "{{ cookiecutter.project_name }}".
#
#
# More information about the configuration options is available on
#   * the English wiki - http://wiki.nginx.org/Main
#
#######################################################################

upstream {{ cookiecutter.repo_name }}_gunicorn_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:{{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/gunicorn.sock fail_timeout=0;
}

server {

    #---------------------------------------------------------------------------------------------------
    # Enable ngx_pagespeed
    # See: https://github.com/pagespeed/ngx_pagespeed/#how-to-use
    # See: http://xmodulo.com/2014/01/speed-nginx-web-server-pagespeed.html
    #---------------------------------------------------------------------------------------------------


    pagespeed on;
    pagespeed Domain *.{{ cookiecutter.domain_name }};
    pagespeed MapOriginDomain "http://localhost" "http://unix:{{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/gunicorn.sock";

    pagespeed FileCachePath /tmp/ngx_pagespeed_cache/{{ cookiecutter.repo_name }};  # Use tmpfs for best results.


    pagespeed LoadFromFile "^https?://www.{{ cookiecutter.domain_name }}/static/"
                            "{{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/data/static/";

    # enable CoreFilters
    pagespeed RewriteLevel CoreFilters;

    # disable particular filter(s) in CoreFilters
    pagespeed DisableFilters rewrite_images;

    # enable additional filter(s) selectively
    pagespeed EnableFilters collapse_whitespace;
    pagespeed EnableFilters lazyload_images;
    pagespeed EnableFilters insert_dns_prefetch;
    
    #  Ensure requests for pagespeed optimized resources go to the pagespeed
    #  handler and no extraneous headers get set.
    location ~ "\.pagespeed\.([a-z]\.)?[a-z]{2}\.[^.]{10}\.[^.]+" { add_header "" ""; }
    location ~ "^/ngx_pagespeed_static/" { }
    location ~ "^/ngx_pagespeed_beacon$" { }
    
    location /ngx_pagespeed_statistics { 
        allow 127.0.0.1;
        allow 89.176.36.74;
        deny all; 
    }

    location /ngx_pagespeed_global_statistics { 
        allow 127.0.0.1;
        allow 89.176.36.74;
        deny all; 
    }

    location /ngx_pagespeed_message { 
        allow 127.0.0.1;
        allow 89.176.36.74;
        deny all; 
    }

    location /pagespeed_console { 
        allow 127.0.0.1;
        allow 89.176.36.74;
        deny all; 
    }


    #---------------------------------------------------------------------------------------------------
    # Basic options
    #---------------------------------------------------------------------------------------------------    

    listen   80;

    # <This will enable https>
    # listen 443 default_server ssl;
    # </>

    server_name www.{{ cookiecutter.domain_name }} {{ cookiecutter.domain_name }};

    # Uncomment to enable basic auth
    # auth_basic "Restricted";
    # auth_basic_user_file {{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/.htpasswd;

    client_max_body_size 4G;

    access_log {{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/log/nginx-access.log;
    error_log  {{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/log/nginx-error.log;

    location /static/ {
        alias   {{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/data/static/;
    }

    location /robots.txt {
        alias   {{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/data/static/robots.txt;
    }

    location /humans.txt {
        alias   {{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/data/static/humans.txt;
    }

    location ~ ^/favicon.(\w*)$ {
        alias   {{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/data/static/favicon.$1;
    }

    location /media/ {
        alias   {{ cookiecutter.deploy_path }}{{ cookiecutter.repo_name }}/data/media/;
    } 

    #---------------------------------------------------------------------------------------------------
    # Enable gzip compression
    # See: https://rtcamp.com/tutorials/nginx/enable-gzip/
    #---------------------------------------------------------------------------------------------------

    gzip on;
    gzip_disable "msie6";

    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    #---------------------------------------------------------------------------------------------------
    # Proxy for Gunicorn
    # See: http://michal.karzynski.pl/blog/2013/06/09/django-nginx-gunicorn-virtualenv-supervisor/
    #---------------------------------------------------------------------------------------------------

    location / {
        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        # proxy_set_header X-Forwarded-Proto https;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://{{ cookiecutter.repo_name }}_gunicorn_server;
            break;
        }
    }

    # Error pages
    # error_page 500 502 503 504 /500.html;
    # location = /500.html {
    #     root /usr/share/nginx/html;
    # }   
}

